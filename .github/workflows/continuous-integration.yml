# @format

name: Continuous Integration
on:
     push:
          branches:
               - main
     pull_request:
          types: [opened, synchronize, reopened, ready_for_review]

jobs:
     build_web:
          runs-on: ubuntu-latest
          steps:
               - name: Checkout repository
                 uses: actions/checkout@v4

               - uses: pnpm/action-setup@v3
                 name: Install pnpm
                 with:
                      version: 7
                      run_install: false

               - name: Get pnpm store directory
                 shell: bash
                 run: |
                      echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

               - uses: actions/cache@v4
                 name: Setup pnpm cache
                 with:
                      path: ${{ env.STORE_PATH }}
                      key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                      restore-keys: |
                           ${{ runner.os }}-pnpm-store-

               - name: Sync node version and setup cache
                 uses: actions/setup-node@v4
                 with:
                      node-version: "lts/*"
                      cache: "pnpm"

               - name: Install dependencies
                 run: pnpm install --no-frozen-lockfile

               # - name: Lint
               #   run: pnpm run lint

               - name: Build
                 run: pnpm run build

     build:
          needs: build_web
          # Prevent forked PRs from running the build job which is expensive
          if: github.repository == 'prayag17/Blink'
          strategy:
               fail-fast: false
               matrix:
                    platform: [macos-latest, ubuntu-22.04, windows-latest]
          runs-on: ${{ matrix.platform }}
          environment: TAURI
          steps:
               - name: Checkout repository
                 uses: actions/checkout@v4

               - name: Install dependencies (ubuntu only)
                 if: matrix.platform == 'ubuntu-22.04'
                 # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
                 run: |
                      sudo apt-get update
                      sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev librsvg2-dev

               - name: Rust setup
                 uses: dtolnay/rust-toolchain@stable

               - name: Rust cache
                 uses: swatinem/rust-cache@v2
                 with:
                      workspaces: "./src-tauri -> target"

               - uses: pnpm/action-setup@v3
                 name: Install pnpm
                 with:
                      version: 7
                      run_install: false

               - name: Get pnpm store directory
                 shell: bash
                 run: |
                      echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

               - uses: actions/cache@v4
                 name: Setup pnpm cache
                 with:
                      path: ${{ env.STORE_PATH }}
                      key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                      restore-keys: |
                           ${{ runner.os }}-pnpm-store-

               - name: Sync node version and setup cache
                 uses: actions/setup-node@v4
                 with:
                      node-version: "lts/*"
                      cache: "pnpm"

               - name: Install dependencies
                 run: pnpm install --no-frozen-lockfile

               - name: Build app
                 run: pnpm run tauri build --debug
                 env:
                      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
                      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

                      # TODO: Remove the below command after upstream issue is fixed
                      # Related issue: https://github.com/tauri-apps/tauri/issues/10702
                      WEBKIT_DISABLE_DMABUF_RENDERER: 1 # Disable DMABUF renderer on Wayland

               - name: Upload build Artifacts
                 uses: actions/upload-artifact@v4
                 with:
                      name: Blink-${{ matrix.platform }}-dev${{ github.sha }}
                      path: src-tauri/target/debug/bundle/*

     # Create or update nightly release
     nightly_release:
          needs: build
          if: github.repository == 'prayag17/Blink' && github.event_name == 'push' && github.ref == 'refs/heads/main'
          runs-on: ubuntu-latest
          permissions:
               contents: write     # Required for creating/updating releases
          steps:
               - name: Checkout repository
                 uses: actions/checkout@v4.2.2

               - name: Download all artifacts
                 uses: actions/download-artifact@v4.3.0
                 with:
                    path: artifacts
                    
               - name: Install dependencies
                 run: npm install mime-types

               - name: Get commit details
                 id: commit-details
                 run: |
                   echo "message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT
               - name: Create or update nightly release
                 uses: actions/github-script@v7.0.1
                 env:
                    COMMIT_MESSAGE: ${{ steps.commit-details.outputs.message }}
                 with:
                    github-token: ${{ secrets.GITHUB_TOKEN }}
                    script: |
                      const fs = require('fs');
                      const path = require('path');
                      
                      // Get today's date in YYYY-MM-DD format
                      const today = new Date().toISOString().split('T')[0];
                      const releaseTag = 'nightly';
                      const releaseName = `Nightly Build (${today})`;
                      
                      // Check if nightly release already exists
                      console.log("Checking for existing nightly release...");
                      let release;
                      try {
                        release = await github.rest.repos.getReleaseByTag({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          tag: releaseTag
                        });
                        console.log("Found existing nightly release");
                      } catch (error) {
                        if (error.status === 404) {
                          console.log("No existing nightly release found, creating one...");                          
                          release = await github.rest.repos.createRelease({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            tag_name: releaseTag,
                            name: releaseName,
                            body: `Nightly build created on ${today} from the latest main branch\nLast commit: ${context.sha}\nCommit message: ${process.env.COMMIT_MESSAGE || "No commit message available"}`,
                            prerelease: true
                          });
                          release = release.data;
                        } else {
                          throw error;
                        }
                      }
                        // Handle the case where we have an existing release
                      // The release object structure differs depending on whether it came from getReleaseByTag or createRelease
                      const releaseId = release.data ? release.data.id : release.id;
                      
                      if (releaseId) {
                        // Update existing release
                        console.log("Updating existing nightly release...");
                        const updateResult = await github.rest.repos.updateRelease({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          release_id: releaseId,
                          name: releaseName,
                          body: `Nightly build updated on ${today} from the latest main branch.\nLast commit: ${context.sha}\nCommit message: ${process.env.COMMIT_MESSAGE || "No commit message available"}`,
                          prerelease: true
                        });
                        release = updateResult.data;
                      }
                        // Delete existing assets to replace them with new ones
                      if (release.assets && release.assets.length > 0) {
                        console.log("Deleting existing release assets...");
                        for (const asset of release.assets) {
                          await github.rest.repos.deleteReleaseAsset({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            asset_id: asset.id
                          });
                        }
                      }
                        // Upload new artifacts
                      console.log("Uploading new artifacts...");
                      const artifactsDir = 'artifacts';
                      const platforms = ['macos-latest', 'ubuntu-22.04', 'windows-latest'];
                      const mime = require('mime-types');
                      
                      for (const platform of platforms) {
                        const platformDir = path.join(artifactsDir, `Blink-${platform}-dev${context.sha}`);
                        
                        if (!fs.existsSync(platformDir)) {
                          console.log(`No artifacts found for ${platform}`);
                          continue;
                        }
                        
                        const files = fs.readdirSync(platformDir, { recursive: true });
                        for (const file of files) {
                          if (typeof file === 'string' && !fs.statSync(path.join(platformDir, file)).isDirectory()) {
                            const filePath = path.join(platformDir, file);
                            const fileName = path.basename(filePath);
                            const contentType = mime.lookup(fileName) || 'application/octet-stream';
                            
                            console.log(`Uploading ${fileName} from ${platform}...`);
                            
                            // Use Octokit's uploadReleaseAsset with proper content type for binary data                            
                            await github.rest.repos.uploadReleaseAsset({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              release_id: release.id,
                              name: `${platform.replace(/-/g, '_')}-${fileName}`,
                              data: fs.readFileSync(filePath),
                              headers: {
                                'content-type': contentType,
                                'content-length': fs.statSync(filePath).size
                              }
                            });
                          }
                        }
                      }
                      
                      console.log("Nightly release updated successfully!");
